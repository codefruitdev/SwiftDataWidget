<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>1</string>
					<key>EndingLineNumber</key>
					<string>105</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>29</string>
					<key>Timestamp</key>
					<string>743655137.536636</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftDataWidget/DataModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>extension DataModel {
    
    struct UserDefaultsKey {
        static let historyToken = "historyToken"
    }
    
    func findUpdatedThingsWithCounts() -&gt; [Thing] {
        let updatedThings = findUpdatedThings()
        return Array(updatedThings)
    }
    
    private func findUpdatedThings() -&gt; Set&lt;Thing&gt; {
        let tokenData = UserDefaults.standard.data(forKey: UserDefaultsKey.historyToken)
        
        var historyToken: DefaultHistoryToken? = nil
        if let tokenData {
            historyToken = try? JSONDecoder().decode(DefaultHistoryToken.self, from: tokenData)
        }
        let transactions = findTransactions(after: historyToken, author: TransactionAuthor.widget)
        let (updatedThings, newToken) = findThings(in: transactions)
        
        if let newToken {
            let newTokenData = try? JSONEncoder().encode(newToken)
            UserDefaults.standard.set(newTokenData, forKey: UserDefaultsKey.historyToken)
        }
        return updatedThings
    }
    
    private func findTransactions(after token: DefaultHistoryToken?, author: String) -&gt; [DefaultHistoryTransaction] {
        
        var historyDescriptor = HistoryDescriptor&lt;DefaultHistoryTransaction&gt;()
        
        if let token {
            historyDescriptor.predicate = #Predicate { transaction in
                (transaction.token &gt; token) &amp;&amp; (transaction.author == author)
            }
        }
        
        var transactions: [DefaultHistoryTransaction] = []
        let taskContext = ModelContext(modelContainer)
        do {
            transactions = try taskContext.fetchHistory(historyDescriptor)
        } catch let error {
            print(error)
        }
        
        return transactions
    }
    
    private func findThings(in transactions: [DefaultHistoryTransaction]) -&gt; (Set&lt;Thing&gt;, DefaultHistoryToken?) {
        let taskContext = ModelContext(modelContainer)
        var resultThings: Set&lt;Thing&gt; = []
        
        for transaction in transactions {
            for change in transaction.changes {
                let modelID = change.changedPersistentIdentifier
                let fetchDescriptor = FetchDescriptor&lt;Thing&gt;(predicate: #Predicate { thing in
                    thing.persistentModelID == modelID
                })
                let fetchResults = try? taskContext.fetch(fetchDescriptor)
                guard let matchedThing = fetchResults?.first else {
                    continue
                }
                switch change {
                case .insert(_ as DefaultHistoryInsert&lt;Thing&gt;):
                    resultThings.insert(matchedThing)
                case .update(_ as DefaultHistoryUpdate&lt;Thing&gt;):
                    resultThings.update(with: matchedThing)
                case .delete(_ as DefaultHistoryDelete&lt;Thing&gt;):
                    resultThings.remove(matchedThing)
                default: break
                }
            }
        }
        return (resultThings, transactions.last?.token)
    }
}</string>
				<key>leading</key>
				<string>}

</string>
				<key>trailing</key>
				<string>
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>ThingWidget/CountIntent.swift</string>
					</dict>
				</dict>
				<key>type</key>
				<string>DVTDocumentLocation</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>13</string>
					<key>EndingLineNumber</key>
					<string>78</string>
					<key>StartingColumnNumber</key>
					<string>12</string>
					<key>StartingLineNumber</key>
					<string>57</string>
					<key>Timestamp</key>
					<string>743655508.927394</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftDataWidget/ContentView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>.onChange(of: phase) {
                WidgetCenter.shared.reloadAllTimelines()
            }
            .onChange(of: phase) { _, newValue in
                Task {
                    if newValue == .active {
                        let updatedThings = await DataModel.shared.findUpdatedThingsWithCounts()
                        for (index, thing) in things.enumerated() {
                            if let updatedThing = updatedThings.first(where: { $0.persistentModelID == thing.persistentModelID }) {
                                UpdateThing(things[index], updatedThing)
                                print("yes")
                            } else {
                                print("no")
                            }
                        }
                        WidgetCenter.shared.reloadAllTimelines()
                    } else {
                        // Persist the unread trip names for the next launch session.
                        WidgetCenter.shared.reloadAllTimelines()
                    }
                }
            }</string>
				<key>leading</key>
				<string>                }
            }
            </string>
				<key>trailing</key>
				<string>
        }
    }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>38</string>
					<key>EndingLineNumber</key>
					<string>31</string>
					<key>StartingColumnNumber</key>
					<string>38</string>
					<key>StartingLineNumber</key>
					<string>31</string>
					<key>Timestamp</key>
					<string>743655525.201311</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftDataWidget/ContentView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>                                if thing.count &lt; 50 {
                                    thing.count += 1
                                    Wi</string>
				<key>trailing</key>
				<string>dgetCenter.shared.reloadAllTimelines()
                                }
                            }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>4</string>
					<key>EndingLineNumber</key>
					<string>15</string>
					<key>StartingColumnNumber</key>
					<string>4</string>
					<key>StartingLineNumber</key>
					<string>15</string>
					<key>Timestamp</key>
					<string>743655553.008376</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftDataWidget/ContentView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>    @Query var things: [Thing]
    @Environment(\.scenePhase) private var phase
    </string>
				<key>trailing</key>
				<string>@State private var updatedThings: [PersistentIdentifier] = []
    
    var body: some View {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>43</string>
					<key>EndingLineNumber</key>
					<string>93</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>86</string>
					<key>Timestamp</key>
					<string>743655624.575974</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>ThingWidget/ThingWidget.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            // Plus Button
            Button(intent: CountIntent(count: entry.count)) {
                Image(systemName: "plus")
                    .font(.title.bold())
                    .frame(width: 15, height: 25)
                    .foregroundStyle(Color.accentColor)
            }
            .buttonRepeatBehavior(.enabled)</string>
				<key>leading</key>
				<string>                .contentTransition(.numericText())
            
</string>
				<key>trailing</key>
				<string>
        }
    }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
